version: 2.1

           
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd ./frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd ./backend
             npm i
             npm run  build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            # Your code here
            cd ./frontend
            sudo  npm  install oauth-sign
            sudo  npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end 
          command: |
             # Your code here
             cd ./backend
             sudo  npm  install oauth-sign
             sudo  npm run  test 
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run audit of  the frontend
          command: |
             # Your code here
             cd ./frontend
             npm i
             npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run audit of  the backend
          command: |
             # Your code here
             cd ./backend
             npm i
             npm audit fix --audit-level=critical        

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name "udapeople-backendStack-${CIRCLE_WORKFLOW_ID:0:7}" --tags project="udapeopleBackend_${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"                          
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" --tags project="udapeople-frontendStack-${CIRCLE_WORKFLOW_ID:0:7}"   --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add Backend EC2 Instance IP to inventory and save to memstash
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            echo `cat .circleci/ansible/inventory.txt`  
             
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt 
          # Here's where you will add some code to rollback on failure           
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
             - e6:0f:75:d7:ee:42:61:6b:f5:cf:d5:20:d5:63:59:15
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure  
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
            name: Install dependencies
            command: |
              # Your code here
              apk update
              apk upgrade
              apk add unzip 
              apk add curl
              /usr/local/bin/python -m pip install --upgrade pip    
      - run:
            name: Install node
            command: |
              apk add --update nodejs nodejs-npm
              node --version
              npm --version
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            # Run and sve the migration output
            npm run migrations > ~/project/backend/migrations_dump.txt
            echo `cat migrations_dump.txt`  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
    

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
  # Make sure ubuntu is 20.04 in backend.yml or you will have issues with PM2. read .circleci/backend/files for more info
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - e6:0f:75:d7:ee:42:61:6b:f5:cf:d5:20:d5:63:59:15
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip nodejs npm
            apk add --update openssh-client
      - run:
          name: Compress Backend
          command: |
            [[ ! -d backend ]] && mkdir backend
            myenv="backend/.env"
            echo ENVIROMENT=production > $myenv
            echo NODE_ENV=production >> $myenv
            echo TYPEORM_CONNECTION=postgres >> $myenv
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> $myenv
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> $myenv
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> $myenv
            echo TYPEORM_HOST=$TYPEORM_HOST >> $myenv
            echo TYPEORM_PORT=$TYPEORM_PORT >> $myenv
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> $myenv
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> $myenv
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> $myenv
            cat $myenv
            tar -C backend -czvf artifact.tar.gz .
            ls -la
      - run:
          name: Deploy backend
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False
            pwd
            cat .circleci/ansible/inventory.txt
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
       - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
       - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
    

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: update
          command: |  
            sudo apt update && sudo apt upgrade            
            sudo apt install curl
      - run:
          name: Install aws
          command: |                        
            sudo apt-get install python python-pip
            sudo pip install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            npm audit fix
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"        
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
   
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout 
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip    
      - run:
          name: Install node
          command: |
            apk add --update nodejs nodejs-npm
            node --version
            npm --version
      - run:
          name: Install aws
          command: |    
            pip install awscli --upgrade   
            aws --version       
          
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            echo $BACKEND_IP
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="https://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.us-east-1.amazonaws.com/index.html#/employees"             
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"        
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          # If we have the cloudfront stack existing, update. if not then create from scratch
          # Note to Make http only request. check cloudfront.yml
          command: |
            echo "Update CloudFront"
            aws cloudformation deploy  --template-file .circleci/files/cloudfront.yml  --stack-name "udapeople-cloudfront"   --region ${AWS_DEFAULT_REGION}   --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"                            
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Get Old Stack Workflow ID and Remove old stacks and files
          command: |
            originalWorkflowID="charankumarthirumala"
            echo $originalWorkflowID
            if [ -n "$originalWorkflowID" ]
            then
              aws s3 rm s3://udapeople-$originalWorkflowID --recursive
              aws s3 rb s3://udapeople-$originalWorkflowID --force
              aws cloudformation delete-stack --stack-name cloudfontlocal
              aws cloudformation delete-stack --stack-name cloudfontlocal
            else
              echo "No old workflow exists"
            fi            
   

workflows:
  default:
    jobs:
     - build-backend
     - build-frontend   
     - test-frontend:
          requires: [build-frontend]
     - test-backend:
          requires: [build-backend]  
     - scan-backend:
          requires: [build-backend]
     - scan-frontend:
          requires: [build-frontend]  
     - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
     - configure-infrastructure:
          requires: [deploy-infrastructure]
     - run-migrations:
            requires: [configure-infrastructure]    
     - deploy-backend:
          requires: [run-migrations]            
     - deploy-frontend:
          requires: [deploy-backend]  
     - smoke-test:
          requires: [deploy-backend, deploy-frontend]
     - cloudfront-update:
          requires: [smoke-test]   
     - cleanup:
          requires: [cloudfront-update]
    